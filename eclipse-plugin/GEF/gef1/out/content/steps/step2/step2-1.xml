<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" 
    version="5.0">
    <info>
        <title>创建 Editor </title>
    </info>
    <section>
        <title>建议参考书籍</title>
        <para>下面该创建最重要的部分 Editor了。 最通用的例子程序是把 GEF的图形画在 Editor上，我不明白为什 么有些人很希望把图画到View上。
            其实Editor从EditorPart派生而来， 提供了对图形修改后的提示保存 （dirty 处理）和保存等函数。关于 Editor和 View的介绍和区别，可以参考这两本书： <itemizedlist>
                <listitem>
                    <para>Eclipse Rich Client Platform : Designing, Coding, and Packaging Java(TM)
                        Applications (Eclipse (Addison-Wesley)) </para>
                </listitem>
                <listitem>
                    <para>Eclipse: Building Commercial-Quality Plug-ins (Eclipse Series) </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section>
        <title>开始</title>
        <section>
            <title>新建一个editor</title>
            <para>一个最基本的 GEF 工程 应包括：</para>
            <itemizedlist>
                <listitem><para>模型</para></listitem>
                <listitem><para>控制器</para></listitem>
                <listitem><para>视图</para></listitem>
            </itemizedlist>
            <para>在下面的图中可以看到我们建立了 3 个包， （另一个包是
            RCP 的）</para>
            <itemizedlist>
                <listitem><para> gef.tutorial.step.model 放置和模型相关的类</para></listitem>
                <listitem><para> gef.tutorial.step.parts 放置和控制器相关的类</para></listitem>
                <listitem><para>gef.tutorial.step.ui  放置和视 图相关的类 显示 GEF 图形的是在
                    Editor 的 Viewer 中，所以我们下面生成的 editor 类就应该 放在这个包里面。</para></listitem>
            </itemizedlist>
            <mediaobject>
               <imageobject>
                   <imagedata fileref="../../images/step2/step2-1.jpg"></imagedata>
               </imageobject>
            </mediaobject>
            <para>下面我们先创建 gef.tutorial.step.ui 包中的 Eclipse的 editor插件，因为我们会发现，以后的大部分工作
                是要在 Editor 中写代码。Eclipse 中的 Editor 是从 org.eclipse.ui.part.EditorPart 扩展而来的，因为我们要把
                Editor 作为操作 GEF 的界面，所以我们这里生成的 DiagramEditor 类是从 org.eclipse.ui.part.EditorPart 的子类 org.eclipse.ui.parts.GraphicalEditor派生而来。因为 GraphicalEditor类可以帮助我们创建显示 GEF图形的
                视图 Viewer，这个后面会看到。 
                关于 GraphicalEditor类的层次结构可以从 help.eclipse.org中看到，我把它拷贝到了这里。 </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../../images/step2/step2-2.jpg"></imagedata>
                </imageobject>
            </mediaobject>
            <para>我们生成的 DiagramEditor类放在 gef.tutorial.step.ui包中，代码都是自动生成的，如下所示。但是我们 要加一个 ID用于标示这个
            Editor</para>
            <programlisting language="text">
                <xi:include href="../../source/step2/step2-1.java" parse="text" language="java"/>
            </programlisting>
        </section>
        <section>
            <title>添加editor 扩展</title>
            <para>在 plugin.xml 的 extensions 页面中，单击 Add…按钮找到 org.eclipse.ui.editors，OK后就看到了。
            然后右点这个添加的 org.eclipse.ui.editors，选择 New->editor 菜单，就生成了下图的 editor. </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../../images/step2/step2-3.jpg"></imagedata>
                </imageobject>
            </mediaobject>
            <para>我们要修改下面的 Extension Element Details: </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../../images/step2/step2-4.jpg"></imagedata>
                </imageobject>
            </mediaobject>
            <para>下面我们就要想办法显示这个 DiagramEditor了。这里我们给 RCP工程加个菜单，这个菜单可以打开
                一个空白的 GEF Editor。 </para>
        </section>
        <section>
            <title>添加菜单</title>
            <section>
                <title>创建一个 Action 的派生类</title>
                <para>这里面定义了菜单和对应的工具按钮的显示字符串和图标，以
                及其 ID等等。这里的 Action 派生类名为 DiagramAction，被放到 gef.tutorial.step.actions包中。 源码如下</para>
                <programlisting language="text">
                <xi:include href="../../source/step2/step2-2.java" parse="text" language="java"/>
            </programlisting>
            </section>
            <section>
                <title>添加创建的 DiagramAction</title>
                <para>在 ApplicationActionBarAdvisor.java 文件中添加前面创建的 DiagramAction。这里我们顺便
                创建了一个 Exit 菜单和一个 About菜单。免得我们的 Diagram菜单看上去太单薄。源码如下</para>
                <programlisting language="text">
                <xi:include href="../../source/step2/step2-3.java" parse="text" language="java"/>
                    
                </programlisting>
                <para>在 plugin.xml 文件的 overview页面中点击“Launce an Eclipse application”那个链接，就可以看
                    到加这个菜单的效果了。但是这个菜单还不能起任何作用，因为我们在 DiagramAction 那个类的 run()中没
                    让它做任何事情。下面我们就要让它显示一个对话框，然后打开一个 Diagram Editor</para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../../images/step2/step2-5.jpg"></imagedata>
                    </imageobject>
                </mediaobject>
            </section>
            <section>
                <title>显示出DiagramEdior</title>
            <section>
                <title>创建一个EditorInput</title>
                <para>因为所有的 Editor 都要有个 EditorInput 作为其内容的提供者，所以我们生成了一个
                    DiagramEditorInput 作为 DiagramEditor 的提供者。因为我们是 RCP 工程，所以我们的 DiagramEditorInput
                    是从 IPathEditorInput 派生的。这里的例子好像是从 Using GEF with EMF中借用来的，我记不很清楚了。
                    我们不详细谈这个 EditorInput 的作用，有疑问的可以参考 RCP 那本书，写的很详细。另外，前面推荐的
                    另外商业插件开发的书也介绍的很多。源码如下</para>
                <programlisting language="text">
                <xi:include href="../../source/step2/step2-4.java" parse="text" language="java"/>
                    
                </programlisting>
            </section>
                <section>
                    <title>打开一个对话框</title>
                    <para>在 DiagramAction 中的 run()函数内添加代码让 Diagram 菜单打开一个对话框。文件的扩
                    展名为*.diagram。</para>
                    <programlisting language="java">
                            <xi:include href="../../source/step2/step2-5.java" parse="text" language="java"/>
                    </programlisting>
                </section>
                <section>
                    <title>设置 Editor为可见</title>
                    <para>最后在Perspective.java文件中设置 Editor为可见。</para>
                    <programlisting language="java">
                        <xi:include href="../../source/step2/step2-6.java" parse="text" language="java"/>
                    </programlisting>
                </section>
                <section>
                    <title>什么是 GEF的路子</title>
                     <para>最后在Perspective.java文件中设置 Editor为可见。</para>
                       <mediaobject>
                           <imageobject>
                               <imagedata fileref="../../images/step2/step2-6.jpg"></imagedata>
                           </imageobject>
                       </mediaobject>
                    <itemizedlist>
                        <listitem><para>1、创建模型 如HelloModel</para></listitem>
                        <listitem><para>2、创建控制器 editpart 一般明明为HelloEditPart</para></listitem>
                        <listitem><para>3、创建连接模型和控制器的工厂，一般命名为**PartFactory</para></listitem>
                        <listitem><para>4、在edit 中创建GraphicalViewer 并显示图像</para></listitem>
                    </itemizedlist>
                    <para>我们就按上图的顺序和规则实现 GEF。 </para>
                </section>
            </section>
        </section>
    </section>
</article>
