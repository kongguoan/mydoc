<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>属性视图</title>
       
    </info>
    <para>前面的例子中图形的文本都是固定的， 下面我们介绍如何使用属性视图 （property view）
        来修改图形的属性。属性视图是通过 org.eclipse.ui.views.properties.IPropertySource接口实
        现的。 
        在 GEF 中，使用属性视图修改的是图形模型的属性（换句话说就是图形模型是属性视
        图的数据源：当图形模型改变时（如图形尺寸或文本改变时） ，属性视图要反映相应改变；
        而在属性视图中修改属性时，图形也要发生相应改变） ，因此，只需要把 IPropertySource
        接口和图形模型类结合起来就行了， 这就需要图形模型类实现 （implements） IPropertySource
        接口。 
        1．  因为我们要用属性视图来对应于所有的图形模型，因此我们让 AbstractModel
        来实现 IPropertySource接口，并重载这个接口中的方法。 </para>
    <programlisting language="java">import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;
public abstract class AbstractModel implements IPropertySource { 
     ............
     public Object getEditableValue() { 
           return this; // 返回模型自身作为可编辑的属性值 
     } 
    public IPropertyDescriptor[] getPropertyDescriptors() { 
     // 如果在抽象模型中返回null会出现异常，因此这里返回一个长度为0的数组 
      // 后面将介绍IPropertyDescriptor数组 
     return new IPropertyDescriptor[0]; 
    } 
    public Object getPropertyValue(Object id) { 
      
       return null; 
    } 
    public boolean isPropertySet(Object id) { 
        return false;
    }
    public void resetPropertyValue(Object id) { 
       
    } 
    public void setPropertyValue(Object id, Object value) { 
      
     } 
  
     ............
}        
    </programlisting>
    <para>修改 HelloModel，使其实际上成为属性视图的数据源。这就要重载 AbstractModel 中的相应方法。 </para>
    <programlisting language="java">
public class HelloModel extends AbstractModel {
    ..........
	/* 这个地方添加的字符串 ID 用于改变图形模型的文本时可以被 Editpart 识别 */
	public static final String P_TEXT = "_text"; // ①
	public void setText(String text) {
		this.text = text;
		/*
		 * 图形文本改变时通知其 EditPart,这个地方使用 firePropertyChange 方法来通知图形模型的 Editpart
		 * 图形的文本已经改变。 现在，把图形模型和属性视图已经联系起来了。
		 */
		firePropertyChange(P_TEXT, null, text);
	}
	/*
	 * 下面时重载 IPropertySource 接口的方法
	 * 其实 Property View 中用 TableView来显示属性。第一列是属性名称，第 2 列是属性值。
	 * IPropertyDescriptor[]数组顾名思义就是用来设置属性名称的。这里我们只提供了一个属性， 并命名为 Greeting
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		IPropertyDescriptor[] descriptors = new IPropertyDescriptor[] { new TextPropertyDescriptor(
				P_TEXT, "Greeting") };
		return descriptors;

	}

	// 使用属性的 ID 来获得该属性在属性视图的值
	public Object getPropertyValue(Object id) {
		if (id.equals(P_TEXT)) {
			// 这里获得 Property view 中文本属性的值
			return text;
		}
		return null;
	}

	// 判断属性视图中的属性值是否改变，如果没有指定的属性则返回 false
	public boolean isPropertySet(Object id) {
		if (id.equals(P_TEXT))
			return true;
		else
			return false;
	}

	// 设置指定 Id 的属性值。如果该属性不能改变或者没有这个属性，则不作任何事
	public void setPropertyValue(Object id, Object value) {
		if (id.equals(P_TEXT)) {
			// 改变文本时设置文本的属性值
			setText((String) value);
		}
	}           
    ..........
}        
    </programlisting>
    <para>因为我们还没把属性视图和 HelloEditorPart 联系起来，因此就算你在属性
        视图修改了图形的属性，在 Graphical Editor 中的图形也不会发生改变。所以，我们
        要修改 HelloEditorPart 来接受文本属性改变的通知。 </para>
    <programlisting language="java">
public class HelloEditorPart  extends EditPartWithListener{
    .......
    @Override
	public void propertyChange(PropertyChangeEvent evt) {
		if (evt.getPropertyName().equals(HelloModel.PROP_CONSTRAINT))
			refreshVisuals();
		 else if (evt.getPropertyName().equals(HelloModel.P_TEXT)) { 
	          // 当图形模型的文本属性改变时，在Graphical Editor中的图形文本也改变 
	          Label label = (Label) getFigure(); 
	          label.setText((String) evt.getNewValue()); 
	      } 
	}
    .......

}        
    </programlisting>
    <para>这时候如果你运行程序， 还是看不到Property View， 这是因为你还要在Perspective
    中加上 Property View。 </para>
    <programlisting language="java">package gef.tutorial.step;

import org.eclipse.ui.IFolderLayout;
import org.eclipse.ui.IPageLayout;
import org.eclipse.ui.IPerspectiveFactory;

public class Perspective implements IPerspectiveFactory {

	public void createInitialLayout(IPageLayout layout) {
		final String properties = "org.eclipse.ui.views.PropertySheet";
		final String editorArea = layout.getEditorArea();
		IFolderLayout leftTopFolder = layout.createFolder("LeftTop",
				IPageLayout.LEFT, 0.34f, editorArea);
		leftTopFolder.addView(properties);
		layout.setEditorAreaVisible(true);
	}
}
        
    </programlisting>
    <para>  好了，运行一下程序，在 Property View中修改文本的值，然后回车就可以看到图形的
    文本也发生了改变。</para>
    <mediaobject>
        <imageobject>
            <imagedata fileref="../../images/step9/step9-1.jpg"/>
        </imageobject>
    </mediaobject>
</section>
