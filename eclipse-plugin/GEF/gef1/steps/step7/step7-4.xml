<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<section xmlns="http://docbook.org/ns/docbook"   xmlns:xi="http://www.w3.org/2001/XInclude" 
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Undo/redo 撤消/重复操作 </title>
    
    </info>
    <para>  执行过的 Command 都放在 EditDomain （还记得我们第 1 回就讲到的这个东西吧） 中的 CommandStack
        中。 当执行 undo 操作时， 该命令从命令堆栈中弹出； redo 时， 则再放进去。 所以我们之需要在***Command
        类中重载 Command#Undo 就可以了。但是，我们还要设置一个变量以记录模型以前的状态。 </para>
    <programlisting language="java">
        <xi:include href="../../source/step7/step7-4.java" parse="text" language="java"/>
    </programlisting>
    <para>那为什么我们不重载 redo()呢？从 Command 中可以看出 redo()执行的就是 execute()。 </para>
    <programlisting language="java">public abstract class Command {
    .....
    public void redo() {
		execute();
	}
    .......
}
        
    </programlisting>
    <para>  在 Java 中，Undo/Redo是 Action，所以我们要有菜单或者工具按钮来执行这些 Action，那我们就顺便
    把如何添加工具按钮介绍一下吧。步骤如下： （不详细说明，大家去看那两本书） </para>
    <para>创建一个 DiagramActionBarContributor类</para>
    <programlisting language="java">
        <xi:include href="../../source/step7/step7-5.java" parse="text" language="java"/>
    </programlisting>
    <para> 下面内容来自 <link  xlink:href="http://bjzhanghao.cnblogs.com/archive/2005/03/30/128704.html " >八进制</link>：</para>
    <para> 编辑器没有自己的工具条，它的菜单只能加在主菜单里。 （其实这话不能这么说，SWT Designer就是 一个反例。EditPart 在 RCP中是可以添加工具条的。
        ）</para>
    <para>                首先要介绍 Retarget Action 的概念，这是一种具有一定语义但没有实际功能的 Action，它唯一的作用
        就是在主菜单条或主工具条上占据一个项位置， 编辑器可以将具有实际 功能的 Action 映射到某个 Retarget Action，当这个编辑器被激活时，主菜单/工具条上的那个
        Retarget Action就会具有那个 Action 的功能。</para>
    <para>                举 例来说，Eclipse 提供了 IWorkbenchActionConstants.COPY这个 Retarget
        Action，它的文字和图标都是预先 定义好的，假设我们的编辑器需要一个"复制节点到剪贴板"功能，因为"复制节点"和"复制"这两个词的语 义十分相 近，所以可以新建一个具有实际功能的
        CopyNodeAction（extends Action） ，然后在适当的位置调 用下面代码实现二者的映射：
        IActionBars.setGlobalActionHandler(IWorkbenchActionConstants.COPY，copyNodeAction)
        当这个编辑器被激活时，Eclipse 会检查到这个映射，让 COPY 项变为可用状态，并且当用户按下它时去执 行 CopyNodeAction 里定义 的操作，即
        run()方法里的代码。Eclipse 引入Retarget Action 的目的是为了尽量 减少主菜单/工具条的重建消耗，并且有利于用户使用上的一致性。在 GEF
        应用程序里，因为很可能存在 多个视图（例如编辑视图 和大纲视图，即使暂时只有一个视图，也要考虑到以后扩展为多个的可能） ，而
        每个视图都应该能够完成相类似的操作，例如在树结构的大纲视图里也应该像编辑视 图一样可以删除选 中节点，所以一般的操作都应以映射到 Retarget Action 的方式建立。 </para>
    <para>在 plugin.xml 文件中设置 contributorClass。</para>
    <mediaobject>
        <imageobject>
            <imagedata fileref="../../images/step7/step7-2.jpg"/>
        </imageobject>
    </mediaobject>
    <para>运行</para>
    <mediaobject>
        <imageobject>
            <imagedata fileref="../../images/step7/step7-3.jpg"/>
        </imageobject>
    </mediaobject>
</section>
