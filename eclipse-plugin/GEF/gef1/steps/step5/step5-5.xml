<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>绘制带约束的图形 </title>

    </info>
 <para> 最后，我们在视图中看看添加约束之后的图形是什么样的效果。这里我们绘制了三个 Hello World 图 形，他们的约束（其实就是他们的位置和大小，由矩形决定）分别是： <itemizedlist>
            <listitem>
                <para> Rectangle(0, 0, -1, -1) </para>
            </listitem>
            <listitem>
                <para> Rectangle(30, 30, -1, -1) </para>
            </listitem>
            <listitem>
                <para> Rectangle(10, 80, 80, 50) </para>
            </listitem>
        </itemizedlist> 大家可能奇怪，为什么第 1 和第2个矩形的长和宽被设置为-1 呢，这样可以使矩形的尺寸随着里面文 本的变化而变化，就是说这样的矩形正好能包含文本。而对第
        3 个矩形而言，如果里面的文本太长，就会 有部分看不到了。 在 gef.tutorial.step.ui.DiagramEditor中，添加代码如下：
        <programlisting language="java">
@Override
	protected void initializeGraphicalViewer() {
		ContentsModel contents = new ContentsModel();

		HelloModel child1 = new HelloModel();
		child1.setConstraint(new Rectangle(0, 0, -1, -1));
		contents.addChild(child1);

		HelloModel child2 = new HelloModel();
		child2.setText("Welcome");
		child2.setConstraint(new Rectangle(30, 30, -1, -1));
		contents.addChild(child2);

		HelloModel child3 = new HelloModel();
		child3.setConstraint(new Rectangle(10, 80, 80, 50));
		contents.addChild(child3);

		getGraphicalViewer().setContents(contents);
	}         
     </programlisting>
 </para>
    <para>好了，最后的效果就是： </para>
    <mediaobject>
        <imageobject>
            <imagedata fileref="../../images/step5/step5-1.jpg"/>
        </imageobject>
    </mediaobject>
</section>
