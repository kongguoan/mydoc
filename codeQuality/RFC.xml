<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>RFC(Response of Class)</title>
    </info>
   <section><title>说明</title>
       <para>他是描述一个类的复杂性</para>
       <para>公式</para>
       <para>RFC = M+ R (M = 这个类中方法个数. R = 其他总数)</para>
       <itemizedlist>
           <listitem><para>本类的方法数量</para></listitem>
           <listitem><para>调用的其他方法数量（重复的只记一次）<note><para>t getters 和 setters 不计</para></note></para></listitem>
       </itemizedlist>
       <para>　当一个类和很多其他类存在依赖时，它就变得复杂甚至难以修改和维护，这样，RFC值越大，表示你的系统味道越坏。</para>
       <para>当然，因为OO系统是基于类和方法，不可能开发出一个0值RFC的系统，但是我们追求的目标是一种平衡，当你设计OO系统时，必须时刻注意这些公理，尽量避免类的编码达到一个RFC高值。
           
           　　我们如果使用现代一些模式：如Ioc模式，可以帮助我们方便不费力气地达到这样一个平衡，因此，使用Spring/Jdon之类框架是降低RFC值的一个捷径。</para>
   </section>
    <section><title>例</title>
        <programlisting language="java">
public class ClassA 
{
  private ClassB classB = new ClassB();        // call (constructor of class B) => +1
  public void doSomething(){                   // method declaration => +1
    System.out.println ( "doSomething");       // call (System.out.println) => +1
  }
  public void doSomethingBasedOnClassB(){      // method declaration => +1
    System.out.println (classB.toString());    // call (System.out.println) => 0 because already counted on line 5 + call (toString) => +1
  }
}
 
// default constructor of ClassA => +1
// RFC = 6
            
        </programlisting></section>
</article>
